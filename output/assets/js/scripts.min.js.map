{"version":3,"sources":["scripts.js"],"names":["document","addEventListener","expandMenu","target","querySelector","classList","toggle","event","matches","remove","setTopic","selection","count","innerText","innerHTML","random","randomOn","console","log","randomOff","setTopicHeader","topicData","topicPosition","setCategoryHeader","chosenCategory","setDescription","spot","populateTopic","topicList","i","length","menuItems","querySelectorAll","setAttribute","onclick","this","getAttribute","questionTotal","populateCategory","categoryList","counter","u","location","indexOf","push","categoryPosition","setCategory","categoryCounter","add","randomToggle","randomTopicHolder","topicDataRandom","sort","a","b","Math","topicDataBackup","startQuiz","timeStart","Date","getTime","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","quizBody","responseText","topicDataFilteredCategory","focus","modalGenerator","textStrings","endQuiz","progressCounter","nextQuestion","checkAnswer","keyCode","preventDefault","final","setProgressFieldValue","open","send","userAnswer","value","rightAnswer","toLowerCase","trim","score","errorGenerator","pleaseAnswer","updateProgressCounter","scoreMessage","timeEnd","gatherStats","Number","numberOfQuestions","returnToMain","reload","message","newDiv","createElement","appendChild","setTimeout","removeChild","actionOne","actionTwo","closeModal","divClass","saveLocalStorage","itemName","window","localStorage","setItem","JSON","stringify","readLocalStorage","parse","getItem","gameSession","date","formatDate","outOf","duration","millisToMinutesAndSeconds","abs","topic","category","months","d","dateNow","getDate","monthNow","getMonth","yearNow","getFullYear","getHours","getMinutes","getSeconds","millis","minutes","floor","seconds","toFixed","calculateScore","scoreHolder","calculateDuration","selectTopic","doAjax","id","contains"],"mappings":"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","file":"scripts.min.js","sourcesContent":["'use strict'; // no sloppy JS habits allowed here.\n// wait till page is fully loaded\ndocument.addEventListener('DOMContentLoaded', function(){\n\tvar topicData; // empty var to hold question JSON\n\tvar topicDataRandom; // will hold the shuffled order\n\tvar topicDataBackup, backup2; // untampered copy of topicData order\n\tvar topicDataFilteredCategory = []; // holds questions from current category\n\tvar topicPosition; // track the selected topic\n\tvar categoryPosition; // track current category position... I might need this to be an object later.\n\tvar chosenCategory = 'All'; // hold user's selected category\n\tvar progressCounter = 0; // track number of questions asked\n\tvar score = 0; // track user's score\n\tvar final = null; // end status\n\tvar random = true; // boolean for shuffling questions\n\t// collection of text strings\n\tvar textStrings = {\n\t\t'selectTopic' : 'Please select a topic.',\n\t\t'pleaseAnswer' : 'At least try and answer the question, alright?',\n\t\t'endQuiz' : 'Are you sure you want to end your quiz?'\n\t}\n\tvar gameSession; // initialize local array for holding goals\n\t// if localStorage is found, load it into the variable\n\tif (readLocalStorage('gameSession')) {\n\t    //console.log('Found existing localStorage values.',readLocalStorage('gameSession'));\n\t    gameSession = readLocalStorage('gameSession');\n\t  }\n\t// otherwise make a blank array\n\telse {\n\t    console.log('No localStorage, starting fresh.');\n\t    gameSession = [];\n\t}\n\tvar timeStart; // will hold session starting timestamp\n\tvar timeEnd; // will hold session ending timestamp\n\tvar numberOfQuestions; // count of questions for stat page\n\tvar wrongAnswers = []; // hold all wrong answers\n\n\tfillStats(); // start by showing any existing stats\n\n\t// load questions and topics as soon as the page is ready\n\tfunction doAjax() {\n\t\tvar xmlhttp = new XMLHttpRequest(); // new request\n\t\tvar url = 'assets/data/topics.json'; // data source\n\n\t\txmlhttp.onreadystatechange = function() {\n\t\t\tif (this.readyState == 4 && this.status == 200) {\n\t    \t\ttopicData = JSON.parse(this.responseText); // holds entire JSON\n\t    \t\ttopicDataBackup = topicData; // create backup\n\t    \t\tconsole.log('Topic data backup CLEAN', topicDataBackup);\n\t    \t\ttopicDataRandom = topicData; // set random order to normal values... for now\n\t    \t\tconsole.log('Topicdata contents', topicData);\n\t    \t\t// console.log(topicData, 'untouched topicData');\n\t    \t\tpopulateTopic(); // fill Topic dropdown menu for user to choose\n\t    \t}\n    \t}\n\t    xmlhttp.open('GET', url, true); // connect\n\t    xmlhttp.send(); // Engage!\n\t}\n\tdoAjax(); // You know, run function.\n\n\t// built my own select menu\n\tfunction watchSelectMenu(){\n\t\t// open select menu when clicked\n\t\tdocument.querySelector(\".dropdownMenu\").addEventListener(\"click\", function(event){\n\t\t\tevent.preventDefault(); // stop button standard action\n\t\t\tconsole.log(\"You clicked topic menu\",this.id);\n\t\t\texpandMenu(this.id); //pass id to menu function\n\t\t});\n\t\t// open category menu when clicked\n\t\tdocument.querySelector(\".secondMenu\").addEventListener(\"click\", function(event){\n\t\t\t\tif (!document.querySelector(\"#categoryMenu\").classList.contains('disabled')) {\n\t\t\t\t\tevent.preventDefault(); // stop button standard action\n\t\t\t\t\tconsole.log(\"You clicked categoryMenu\",this.id);\n\t\t\t\t\texpandMenu(this.id); //pass id to menu function\n\t\t\t\t}\n\t\t\t});\n\t}\n\twatchSelectMenu();\n\n\t// when button is clicked, toggle visibility of menu items. It's not fully reusable (yet)\n\tfunction expandMenu(target) {\n\n\t\t// change CSS visibility for specified menu ID\n\t\tdocument.querySelector(\"#\"+target+\"+.dropdownList\").classList.toggle(\"show\");\n\n\t\t// hide menu if anything other than button is clicked\n\t\tdocument.querySelector('body').addEventListener('click', function(event){\n\t\t\t// if topic menu exists on page...\n\t\t\tif (document.querySelector(\"#\"+target+\"+ .dropdownList\")) {\n\t\t\t\t// if target isn't a button turn off show CSS class\n\t\t\t\tif (!event.target.matches('button')) {\n\t\t\t\t\tdocument.querySelector(\"#\"+target+\"+ .dropdownList\").classList.remove(\"show\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} // end expandMenu\n\n\t// set homepage topic menu header from JSON when menu item is selected\n\tfunction setTopic(selection, count) {\n\t\tdocument.querySelector(\"#topicMenu\").innerText = selection;\n\t\tdocument.querySelector(\"#topicMenu + .dropdownList\").classList.toggle(\"show\");\n\t\t//console.log(\"you clicked \"+selection.innerHTML);\n\t\tdocument.querySelector('.questionCount').innerHTML = count + ' Questions'; // total number of questions\n\t\tif(random){\n\t\t\t// document.querySelector('.randomHolder').classList.add('active');\n\t\t\t// document.querySelector('.randomStatus').innerText = 'Random On'; // start with random off\n\t\t\t// randomToggle();\n\t\t\trandomOn();\n\t\t\tconsole.log('random is activated from setTopic');\n\t\t} else {\n\t\t\t// document.querySelector('.randomStatus').innerText = 'Random Off'; // start with random off\n\t\t\t// document.querySelector('.randomHolder').classList.remove('active');\n\t\t\t// randomToggle();\n\t\t\trandomOff();\n\t\t}\n\t\tdocument.querySelector('.randomHolder').classList.remove('hide'); // make random toggle visible\n\t}\n\n\t// set topic name on active quiz page\n\tfunction setTopicHeader() {\n\t\tdocument.querySelector('.topic').innerText = topicData[topicPosition]['name'];\n\t}\n\n\t// set topic name on active quiz page\n\tfunction setCategoryHeader() {\n\t\tdocument.querySelector('.category').innerText = 'Category: ' + chosenCategory;\n\t}\n\n\t// set description contents from JSON when menu item is selected\n\tfunction setDescription(spot) {\n\t\tdocument.querySelector(\"#topicRow .lowerBox\").innerHTML = topicData[spot]['description'];\n\t}\n\n\t// load topic items from JSON file\n\tfunction populateTopic() {\n\t\tvar topicList = ''; // hold HTML tag elements\n\t\tvar linkOpen = '<a>'; // opening tag to be appended below\n\t\tvar linkClose = '</a>' // closing tag to be appended below\n\t\t// attach opening and closing tag to each topic captured from JSON\n\t\tfor (var i = 0; i < topicData.length; i++) {\n\t\t\ttopicList += linkOpen + topicData[i][\"name\"] + linkClose; // grab name field\n\t\t}\n\t\tdocument.querySelector(\"#topicList\").innerHTML = topicList; // set div content\n\t\tvar menuItems = document.querySelectorAll(\"#topicList.dropdownList a\"); // selector for all list link elements\n\n\t\t// set click event listener for each element. I think this was clever\n\t\tfor (var i = 0; i < menuItems.length; i++) {\n\t\t\t// Creates an attribute to track order. Sets it to current loop iteration value\n\t\t\tmenuItems[i].setAttribute('order', i);\n\t\t\t// onclick function for every menuItem link\n\t\t\tmenuItems[i].onclick = function(){\n\t\t\t\t// sends order position to description function. Function pulls the corresponding description from the JSON\n\t\t\t\ttopicPosition = this.getAttribute('order');\n\t\t\t\tsetDescription(topicPosition); // set description to selected topic\n\t\t\t\tvar questionTotal = topicData[topicPosition]['questions'].length; // count questions\n\t\t\t\tsetTopic(this.innerHTML,questionTotal); // sends topic name to the button value. questionTotal to description\n\t\t\t\tif (document.querySelector('.secondMenu.disabled')) {\n\t\t\t\t\tdocument.querySelector('.secondMenu.disabled').classList.remove('disabled'); // enable the category selection menu\n\t\t\t\t}\n\t\t\t\tpopulateCategory(); // when topic is chosen set the category\n\t\t\t}\n\t\t}\n\t}\n\n\t// load category items from JSON file\n\tfunction populateCategory() {\n\t\tvar categoryList = '<a order=\\'0\\'>All</a>'; // hold HTML tag elements\n\t\tvar linkOpen = '<a>'; // opening tag to be appended below\n\t\tvar linkClose = '</a>' // closing tag to be appended below\n\t\tvar counter = 1; // counts number of questions in each category (might need an array...)\n\n\t\t// attach opening and closing tag to each topic captured from JSON\n\t\tvar u = []; // will hold unique categories\n\t\tvar location = topicData[topicPosition]['questions'];\n\t\tfor(var i = 0; i < location.length; i++) {\n\t\t\t// fancy index searching to filter unique values. If unique then add to array\n\t\t\tif (u.indexOf(location[i]['category']) == -1 && location[i]['category'] !== '') {\n\t\t\t\tu.push(location[i]['category']);\n\t\t\t\tconsole.log(topicData[topicPosition]['questions'][i]['category']);\n\t\t\t\tcategoryList += linkOpen + topicData[topicPosition]['questions'][i]['category'] + linkClose; // grab name field\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\n\t\tdocument.querySelector(\"#categoryList\").innerHTML = categoryList; // set div content\n\t\tvar menuItems = document.querySelectorAll(\"#categoryList.dropdownList a\"); // selector for all list link elements\n\n\t\t// set click event listener for each element. I still think this is clever\n\t\tfor (var i = 0; i < menuItems.length; i++) {\n\t\t\t// Creates an attribute to track order. Sets it to current loop iteration value\n\t\t\tmenuItems[i].setAttribute('order', i);\n\t\t\t// onclick function for every menuItem link\n\t\t\tmenuItems[i].onclick = function(){\n\t\t\t\t// sends order position to description function. Function pulls the corresponding description from the JSON\n\t\t\t\tcategoryPosition = this.getAttribute('order');\n\t\t\t\t//setCatDescription(categoryPosition); // there is no category Position right now.\n\t\t\t\t// var questionTotal = topicData[topicPosition]['category'].length; // count questions\n\t\t\t\tvar questionTotal = counter; // count questions\n\t\t\t\tsetCategory(this.innerHTML,questionTotal); // sends category name to the button value. questionTotal to description\n\t\t\t}\n\t\t}\n\t}\n\n\t// set homepage Category menu header when item is selected\n\tfunction setCategory(selection, count) {\n\t\tchosenCategory = selection; // set global category to user's selection\n\t\tdocument.querySelector(\"#categoryMenu\").innerText = selection;\n\t\tdocument.querySelector(\"#categoryMenu + .dropdownList\").classList.toggle(\"show\");\n\t\tconsole.log(\"you clicked \" + selection);\n\t\t// document.querySelector('.questionCount').innerHTML = topicDataFilteredCategory[progressCounter].length + ' Questions'; // total number of questions\n\t\t// attach opening and closing tag to each topic captured from JSON\n\t\tvar u = []; // will hold unique categories\n\t\tvar location = topicData[topicPosition]['questions'];\n\t\tvar categoryCounter = 0;\n\t\tfor(var i = 0; i < location.length; i++) {\n\t\t\tif (location[i]['category'] == chosenCategory) {\n\t\t\t\tcategoryCounter++;\n\t\t\t}\n\t\t}\n\t\tif (chosenCategory == 'All') {\n\t\t\tdocument.querySelector('.questionCount').innerHTML = location.length + ' Questions';\n\t\t} else {\n\t\t\tdocument.querySelector('.questionCount').innerHTML = categoryCounter + ' Questions'; // total number of questions\n\t\t}\n\n\t}\n\n\n\t// event listener for start button. I can move this somewhere else...\n\tfunction watchQuiz(){\n\t\t// start quiz when button is pressed\n\t\tdocument.querySelector('.start').addEventListener('click', function() {\n\t\t\t// console.log(document.querySelector('#topicMenu').innerText);\n\t\t\tvar topicVar = document.querySelector('#topicMenu').innerText; // DOM selection for chosen topic\n\t\t\t// Input validation for topic\n\t\t\tif (topicVar == 'Choose One') {\n\t\t\t\terrorGenerator(textStrings.selectTopic); // modal with nagging text\n\t\t\t} else {\n\t\t\t\tstartQuiz(); // Engage!\n\t\t\t}\n\t\t});\n\t}\n\twatchQuiz(); // start event listener. Called via function later when container content is replaced.\n\t// I know there's probably a smarter way to do this...\n\n\n\t// reusabe random function\n\t/*function randomize(a, b) {\n\t\tconsole.log('i\\'m inside the randomize');\n\t    return Math.random();\n\t}*/\n\n\t//event listener to activate random order\n\tdocument.querySelector('.randomHolder').addEventListener('click', function(){\n\t\tif (random) {\n\t\t\trandom = false;\n\t\t\trandomOff();\n\t\t} else {\n\t\t\trandom = true;\n\t\t\trandomOn();\n\t\t}\n\t});\n\n\t// manipulate UI fields to communicate random status\n\tfunction randomOn(){\n\t\tdocument.querySelector('.randomStatus').innerText = 'Random on';\n\t\tdocument.querySelector('.randomHolder').classList.add('active');\n\t\trandomToggle();\n\t}\n\n\tfunction randomOff(){\n\t\tdocument.querySelector('.randomStatus').innerText = 'Random off';\n\t\tdocument.querySelector('.randomHolder').classList.remove('active');\n\t\trandomToggle();\n\t}\n\n\t// turn random on or off\n\tfunction randomToggle(){\n\t\tconsole.log('in randomToggle function');\n\t\tif (random) {\n\t\t\tconsole.log('random var has value');\n\t\t\t//var randomTopicHolder = topicDataRandom[topicPosition]['questions'];\n\t\t\tvar randomTopicHolder = topicDataRandom[topicPosition]['questions'];\n\t\t\tconsole.log(randomTopicHolder,'normal order');\n\t\t\trandomTopicHolder.sort(function (a, b) {return Math.random() - 0.5;});\n    \t\tconsole.log(randomTopicHolder,'random order');\n\t\t\ttopicData = topicDataRandom;\n\t\t\tconsole.log(topicData[topicPosition]['questions'],'topicData now random');\n\t\t} else {\n\t\t\tconsole.log('topicdata backup', topicDataBackup);\n\t\t\tconsole.log('topicdata random', topicDataRandom);\n\t\t\ttopicData = topicDataBackup; // reset topicData to the backup copy.\n\t\t\tconsole.log(topicData[topicPosition]['questions'],'topicData random is off');\n\t\t}\n\t}\n\n\t// grab quiz page body and fire off question and score system. This is the big one.\n\tfunction startQuiz(){\n\t\ttimeStart = new Date().getTime();\n\t\t// load quiz screen via AJAX\n\t\tvar xmlhttp = new XMLHttpRequest(); // new request\n\t\tvar url = 'assets/data/questionScreen.html'; // data source. It's just an HTML page\n\n\t\t// load quiz body and call even listeners\n\t\txmlhttp.onreadystatechange = function() {\n\t\t\tif (this.readyState == 4 && this.status == 200) {\n\t    \t\tvar quizBody = this.responseText; // holds entire JSON\n\t    \t\t// render HTML into container. A poor man's single page application.\n\t    \t\tdocument.querySelector('body').innerHTML = quizBody;\n\t    \t\t// How do I do this more intelligently?\n\n\t    \t\tsetTopicHeader(); // set topic name\n\t    \t\tsetCategoryHeader(); // set category name\n\n\t\t\t\t// if no category is chosen, proceed in with simple question asking\n\t\t\t\tif (chosenCategory == 'All') {\n\t\t\t\t\t// prefill question one from current topic data\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicData[topicPosition]['questions'][0]['question'];\n\t\t\t\t} else {\n\t\t\t\t\t// console.log(topicData[topicPosition]['questions'].length,'length of questions');\n\t\t\t\t\tconsole.log('chosenCategory',chosenCategory);\n\t\t\t\t\tconsole.log(topicData[topicPosition]['questions']);\n\t\t\t\t\t// find all questions that match chosen category\n\t\t\t\t\tfor (var i = 0; i < topicData[topicPosition]['questions'].length; i++) {\n\t\t\t\t\t\t// if question matches category, add to filtered array\n\t\t\t\t\t\tconsole.log(topicData[topicPosition]['questions'][i]['category']);\n\t\t\t\t\t\tif (topicData[topicPosition]['questions'][i]['category'] == chosenCategory){\n\t\t\t\t\t\t\ttopicDataFilteredCategory.push(topicData[topicPosition]['questions'][i]);\n\t\t\t\t\t\t\t// console.log('category match. i gonna push');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(topicDataFilteredCategory,'show me what you got, topicDataFilteredCategory.');\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicDataFilteredCategory[0]['question'];\n\t\t\t\t}\n\n\t\t\t\tdocument.querySelector('#yourAnswer').focus(); // give text input focus when quiz starts\n\n\t\t\t\t// close button event listener\n\t\t\t\tdocument.querySelector('.close').addEventListener('click', function(){\n\t\t\t\t\tmodalGenerator(textStrings.endQuiz, 'yes', 'no'); // pass text to modal method\n\t\t\t\t});\n\n\t\t\t\t// event listener for hint button\n\t\t\t\tdocument.querySelector('.hint').addEventListener('click', function(){\n\t\t\t\t\tconsole.log('progress counter inside hint is', progressCounter);\n\t\t\t\t\tmodalGenerator(topicData[topicPosition]['questions'][progressCounter]['hint'], 'yes');\n\t\t\t\t});\n\n\t\t\t\t// event listener for skip button\n\t\t\t\tdocument.querySelector('.skip').addEventListener('click', function(){\n\t\t\t\t\tnextQuestion(); // load next question without changing score\n\t\t\t\t});\n\n\t\t\t\t// if random boolean is enabled\n\t\t\t\tif (random) {\n\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random On';\n\t\t\t\t} else {\n\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random Off';\n\t\t\t\t}\n\n\t\t\t\t// event listener for answer button\n\t\t\t\tdocument.querySelector('.answer').addEventListener('click', function(){\n\t\t\t\t\tcheckAnswer();\n\t\t\t\t});\n\n\t\t\t\t// event listener for enter key\n\t\t\t\tdocument.querySelector('#yourAnswer').addEventListener('keypress', function(event){\n\t\t\t\t\tif (event.keyCode == 13) {\n\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\tconsole.log('you pressed enter in text field');\n\t\t\t\t\t\tif(!final){\n\t\t\t\t\t\t\tcheckAnswer();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetProgressFieldValue(); // update progress value at top of screen\n\t    }\n\t    xmlhttp.open('GET', url, true); // connect\n\t    xmlhttp.send(); // Engage!\n\n\t} // end quiz. That was a big AJAX request...\n\n\t// validate user answer\n\tfunction checkAnswer(){\n\t\tvar userAnswer = document.querySelector('#answerRow textarea').value;\n\t\t// if no category is specified\n\t\tif (chosenCategory == 'All') {\n\t\t\tvar rightAnswer = topicData[topicPosition]['questions'][(progressCounter)]['answer'];\n\t\t} // end all category\n\n\t\t// if there is a specified category\n\t\telse {\n\t\t\tvar rightAnswer = topicDataFilteredCategory[(progressCounter)]['answer'];\n\t\t} // end else\n\n\t\t// basic validation. Show modal if there's a value in textarea\n\t\tif (userAnswer != '') {\n\t\t\t// see if user input matches real answer\n\t\t\tfunction checkAnswer(){\n\t\t\t\t// converts to lowercase and removes whitespace to be mobile friendly\n\t\t\t\tif (userAnswer.toLowerCase().trim() == rightAnswer.toLowerCase()) {\n\t\t\t\t\t// display right answer in modal\n\t\t\t\t\tmodalGenerator('Correct, the answer is <span class=\\'correct\\'>' + rightAnswer + '</span>', 'Continue');\n\t\t\t\t\tscore++; // increase score if correct\n\t\t\t\t} else {\n\t\t\t\t\tmodalGenerator('Sorry, the answer is <span class=\\'wrong\\'>' + rightAnswer + '</span>', 'Continue');\n\t\t\t\t}\n\t\t\t}\n\t\t\tcheckAnswer(); // call above function. Useful if I move the code block somewhere else\n\t\t}\n\t\telse {\n\t\t\terrorGenerator(textStrings.pleaseAnswer); // if field is blank yell at the user\n\t\t}\n\t} // end check answer\n\n\t// load new question from topicData JSON dump\n\tfunction nextQuestion() {\n\n\t\t// update counter if there are questions left in the topic\n\t\tif(progressCounter < topicData[topicPosition]['questions'].length) {\n\t\t\tupdateProgressCounter();\n\t\t} else if (progressCounter == topicData[topicPosition]['questions'].length) {\n\t\t\t// Placeholder for now. In the future I may want to take additional actions here if the game is over.\n\t\t\tupdateProgressCounter(); // This currently handles the end game scenario. Action here is kinda redundant (for now).\n\t\t}\n\t}\n\n\t// update progress and score\n\tfunction updateProgressCounter() {\n\t\t// if no category is specified\n\t\tif (chosenCategory == 'All') {\n\t\t\t// increase score if there are questions to ask\n\t\t\tif(progressCounter < topicData[topicPosition]['questions'].length) {\n\t\t\t\tprogressCounter++; // +1\n\t\t\t\t// if we're not on the last question\n\t\t\t\tif (progressCounter <= topicData[topicPosition]['questions'].length - 1){\n\t\t\t\t\t// console.log('new value for progressCounter: ' + progressCounter);\n\t\t\t\t\t// set HTML content to new question value\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicData[topicPosition]['questions'][progressCounter]['question'];\n\t\t\t\t\t//console.log('this should be a new question',topicData[topicPosition]['questions'][progressCounter]['question']);\n\t\t\t\t\tsetProgressFieldValue(); // update progress display at top of page\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if final question has already been asked\n\t\t\tif (progressCounter == topicData[topicPosition]['questions'].length) {\n\t\t\t\tconsole.log('Progress report: game over');\n\t\t\t\t// content of score page\n\t\t\t\tvar scoreMessage = '<h2>Game Over</h2>' + 'Topic: ' + topicData[topicPosition]['name']\n\t\t\t\t\t+ '<br>Category: ' + chosenCategory\n\t\t\t\t\t+ '<br><strong>Score</strong>: ' + score + ' out of ' + topicData[topicPosition]['questions'].length;\n\n\t\t\t\t// lets other loops know the end game sequence is active.\n\t\t\t\t// Note: If I do a smarter content div replacement I'll need to clear this var when user presses Okay\n\t\t\t\tfinal = true;\n\t\t\t\ttimeEnd = new Date().getTime();\n\t\t\t\tgatherStats(); // send session stats to localStorage\n\t\t\t\tmodalGenerator(scoreMessage, 'Continue'); // should I make a 3rd var for desitnation?\n\t\t\t}\n\t\t} // end all category\n\t\t// if specific category is chosen\n\t\telse {\n\t\t\tif(progressCounter < topicDataFilteredCategory.length) {\n\t\t\t\tprogressCounter++; // +1\n\t\t\t\t// if we're not on the last question\n\t\t\t\tif (progressCounter <= topicDataFilteredCategory.length - 1){\n\t\t\t\t\t// console.log('new value for progressCounter: ' + progressCounter);\n\t\t\t\t\t// set HTML content to new question value\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicDataFilteredCategory[progressCounter]['question'];\n\t\t\t\t\t//console.log('this should be a new question',topicData[topicPosition]['questions'][progressCounter]['question']);\n\t\t\t\t\tsetProgressFieldValue(); // update progress display at top of page\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if final question has already been asked\n\t\t\tif (progressCounter == topicDataFilteredCategory.length) {\n\t\t\t\tconsole.log('Progress report: game over');\n\t\t\t\t// content of score page\n\t\t\t\tvar scoreMessage = '<h2>Game Over</h2>' + 'Topic: ' + topicData[topicPosition]['name']\n\t\t\t\t\t+ '<br>Category: ' + chosenCategory\n\t\t\t\t\t+ '<br><strong>Score</strong>: ' + score + ' out of ' + topicDataFilteredCategory.length;\n\t\t\t\t// lets other loops know the end game sequence is active.\n\t\t\t\t// Note: If I do a smarter content div replacement I'll need to clear this var when user presses Okay\n\t\t\t\tfinal = true;\n\t\t\t\ttimeEnd = new Date().getTime();\n\t\t\t\tgatherStats(); // send session stats to localStorage\n\t\t\t\tmodalGenerator(scoreMessage, 'Continue'); // should I make a 3rd var for desitnation?\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// update progress field contents\n\tfunction setProgressFieldValue() {\n\t\tif (chosenCategory == 'All') {\n\t\t\t// update counter at top of page\n\t\t\tif (document.querySelector('.progress')) {\n\t\t\t\tdocument.querySelector('.progress').innerHTML = 'Progress: '\n\t\t\t\t\t+ (Number(progressCounter) + 1) + ' / ' + topicData[topicPosition]['questions'].length;\n\t\t\t\t\tnumberOfQuestions = topicData[topicPosition]['questions'].length;\n\t\t\t}\n\t\t\t// clear the answer textarea if it exists on the page\n\t\t\tif(document.querySelector('#answerRow textarea')){\n\t\t\t\tdocument.querySelector('#answerRow textarea').value = '';\n\t\t\t}\n\t\t}\n\t\t// if specific category is chosen\n\t\telse {\n\t\t\t// update counter at top of page\n\t\t\tif (document.querySelector('.progress')) {\n\t\t\t\tdocument.querySelector('.progress').innerHTML = 'Progress: '\n\t\t\t\t\t+ (Number(progressCounter) + 1) + ' / ' + topicDataFilteredCategory.length;\n\t\t\t\t\tnumberOfQuestions = topicDataFilteredCategory.length;\n\t\t\t}\n\t\t\t// clear the answer textarea if it exists on the page\n\t\t\tif(document.querySelector('#answerRow textarea')){\n\t\t\t\tdocument.querySelector('#answerRow textarea').value = '';\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// clear quiz content from container div and load start screen\n\tfunction returnToMain() {\n\t\tlocation.reload();\n\t\t// I need to do this properly or not at all...\n\t\t//progressCounter = 0;\n\t\t//doAjax();\n\t}\n\n\t// nifty function to deliver standardized error messages\n\tfunction errorGenerator(message) {\n\t\tvar divClass = 'errorBox'; // matches CSS properties\n\t\tvar newDiv = document.createElement('div'); // create div element\n\t\tnewDiv.classList.add(divClass); // apply class for manipulation & styling\n\t\tnewDiv.innerText = message; // apply message var as content of new div\n\t\t//console.log(newDiv);\n\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t// delete error after 5 seconds\n\t\tsetTimeout(function() {\n\t    \tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t    }, 5000);\n\t}\n\n\tfunction modalGenerator(message, actionOne, actionTwo) {\n\t\tvar divClass = 'messageBox'; // hold CSS class name\n\t\tvar newDiv = document.createElement('div'); // create div element\n\t\tnewDiv.classList.add(divClass); // apply class for manipulation & styling\n\t\t//newDiv.innerText = message; // apply message var as content of new div. Ha, simpler times.\n\t\t// Assume two buttons means one will end game\n\t\tif (actionTwo) {\n\t\t\t// apply HTML for two button row. Use passed value for caption. Actions are predetermined.\n\t\t\tnewDiv.innerHTML = '<div class=\\'inner\\'><div class=\\'row pad\\'>'\n\t\t\t\t+ message + '</div> <div class=\\'row full multi\\'><button class=\\'yes\\'>' + actionOne\n\t\t\t\t+ '</button><button class=\\'no\\'>' + actionTwo +'</button></div></div>';\n\t\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t\tdocument.querySelector('.' + divClass +' .yes').focus(); // give main action button focus\n\t\t\t// If user clicks yes, return to main\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('click', function(){\n\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t\t\treturnToMain(); // O'Brien, one to beam up.\n\t\t\t});\n\t\t\t// If user presses no, just cancel\n\t\t\tdocument.querySelector('.' + divClass + ' .no').addEventListener('click', function(){\n\t\t\t\t// self destruct the modal if no\n\t\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t\t\t\tdocument.querySelector('#yourAnswer').focus(); // give text input focus\n\t\t\t});\n\t\t}\n\t\t// If only one button option is passed\n\t\telse {\n\t\t\t// apply HTML for single button row. Use passed value for caption. Actions are still predetermined.\n\t\t\tnewDiv.innerHTML = '<div class=\\'inner\\'><div class=\\'row pad\\'>'\n\t\t\t\t+ message + '</div> <div class=\\'row full\\'><button class=\\'yes\\'>'\n\t\t\t\t+ actionOne + '</button></div></div>';\n\t\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t\tdocument.querySelector('.' + divClass +' .yes').focus(); // give main action button focus\n\n\t\t\t// close modal on enter keypress\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('keypress', function(event){\n\t\t\t\tconsole.log('I know you pressed something')\n\t\t\t\t//console.log(event.keyCode)\n\t\t\t\tif (event.keyCode == 13) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tconsole.log('you pressed enter in a modal');\n\t\t\t\t\tcloseModal();\n\t\t\t\t\t//69 = e;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// if user clicks the button, delete the modal\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('click', function(){\n\t\t\t\tcloseModal();\n\t\t\t\tconsole.log('I will try to close modal');\n\t\t\t});\n\t\t}\n\n\t\tfunction closeModal(){\n\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass)); // self destruct\n\t\t\t// If caption matches answer box button. There are smarter ways to do this...\n\t\t\tif (actionOne == 'Continue') {\n\t\t\t\t// if final var has value, do endgame scenario\n\t\t\t\tif (final) {\n\t\t\t\t\treturnToMain();\n\t\t\t\t} else {\n\t\t\t\t\tnextQuestion();\n\t\t\t\t\tdocument.querySelector('#yourAnswer').focus(); // give text input focus\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t} // end modal generator\n\n\n\t// save to localStorage\n\tfunction saveLocalStorage(itemName) {\n\t\twindow.localStorage.setItem('gameSession', JSON.stringify(itemName));\n\t\tconsole.log('prove it exists by typing:','JSON.parse(window.localStorage.getItem(\\'' + 'gameSession' + '\\'));');\n\t}\n\n\t  // read from localStorage\n\t  function readLocalStorage(itemName) {\n\t    return JSON.parse(window.localStorage.getItem(itemName));\n\t  }\n\n\t// collects data to send to localStorage\n\tfunction gatherStats(){\n\t\tconsole.log('Info sent to localStorage');\n\t  \t// When game is over, push stats to array\n\t\tgameSession.push({\n\t\t\t'date' : formatDate(),\n\t\t\t'score' : score,\n\t\t\t'outOf' : numberOfQuestions,\n\t\t\t'duration' : [timeStart, timeEnd, millisToMinutesAndSeconds(Math.abs(timeStart - timeEnd))],\n\t\t\t'topic' : topicData[topicPosition]['name'],\n\t\t\t'category' : chosenCategory\n\t\t});\n\t\t// send array to localStorage function\n\t\tsaveLocalStorage(gameSession);\n\t}\n\n\t// date and time\n\tfunction formatDate() {\n\t    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\t    var d = new Date();\n\t    var dateNow = d.getDate();\n\t    var monthNow = d.getMonth();\n\t    var yearNow = d.getFullYear();\n\t    var timeNow = d.getHours()+':'+d.getMinutes()+':'+d.getSeconds();\n\t    return months[monthNow] +' '+ dateNow + ', ' + yearNow;\n  \t}\n\n  \t// miliseconds to seconds\n  \tfunction millisToMinutesAndSeconds(millis) {\n\t  var minutes = Math.floor(millis / 60000);\n\t  var seconds = ((millis % 60000) / 1000).toFixed(0);\n\t  return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n\t}\n\n\t// fill out stats blocks\n\tfunction fillStats() {\n\t\tif (readLocalStorage('gameSession')) {\n\t\t\t//console.log('gameSession', gameSession);\n\t\t\tdocument.querySelector('.stats .quizSessions span').innerHTML = gameSession.length;\n\t\t\tdocument.querySelector('.stats .avgScore span').innerHTML = calculateScore();\n\t\t\tdocument.querySelector('.stats .avgDuration span').innerHTML = calculateDuration();\n\t\t\t//document.querySelector('.stats .fastestRound span').innerHTML = calcualteFastest();\n\t\t\t//document.querySelector('.stats .slowestRound span').innerHTML = gameSession.length;\n\t\t} else {\n\t\t\tdocument.querySelector('.stats ul').innerHTML = '<span class=\\'dim\\'>No games played yet!</span>';\n\t\t}\n\t}\n\t// perform math before sending to localStorage\n\tfunction calculateScore() {\n\t\tvar scoreHolder = 0;\n\t\tfor(var i = 0;i<gameSession.length;i++){\n\t\t\tscoreHolder += gameSession[i]['score'] / gameSession[i]['outOf'];\n\t\t\t//console.log(scoreHolder, \"scoreHolder current\");\n\t\t}\n\t\t// console.log(scoreHolder / gameSession.length,'scoreholder / gamelesson length');\n\t\tscoreHolder = (scoreHolder / gameSession.length * 100).toFixed(2) + '%';\n\t\t// console.log(scoreHolder);\n\t\treturn scoreHolder;\n\t}\n\n\t// subtract timestamps to determine how log the session was\n\tfunction calculateDuration() {\n\t\tvar scoreHolder = 0;\n\t\tfor(var i = 0;i<gameSession.length;i++){\n\t\t\tscoreHolder += gameSession[i]['duration'][1] - gameSession[i]['duration'][0];\n\t\t\t// console.log(scoreHolder, \"scoreHolder current\");\n\t\t}\n\t\tscoreHolder = scoreHolder / gameSession.length;\n\t\t//console.log(scoreHolder, 'avg duration here');\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\n\t}\n\t// loop through session data to determine fastest session\n\tfunction calcualteFastest() {\n\t\tvar scoreHolder = 0;\n\t\tfor(var i = 0;i<gameSession.length;i++){\n\t\t\tscoreHolder += gameSession[i]['duration'][1] - gameSession[i]['duration'][0];\n\t\t\t// console.log(scoreHolder, \"scoreHolder current\");\n\t\t}\n\t\tscoreHolder = scoreHolder / gameSession.length;\n\t\t//console.log(scoreHolder, 'avg duration here');\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\n\t}\n\n\t// Placeholder. Not being used.\n\tfunction calcualteSlowest() {\n\t\tvar scoreHolder = 0;\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\n\t}\n\n// end fake document ready\n}, false);"]}