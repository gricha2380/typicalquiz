{"version":3,"sources":["scripts.js"],"names":["document","addEventListener","expandMenu","target","querySelector","classList","toggle","event","matches","remove","setTopic","selection","count","innerText","innerHTML","setTopicHeader","topicData","topicPosition","setDescription","spot","populateTopic","topicList","i","length","menuItems","querySelectorAll","setAttribute","onclick","this","getAttribute","questionTotal","startQuiz","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","quizBody","responseText","modalGenerator","textStrings","endQuiz","console","log","progressCounter","nextQuestion","random","userAnswer","value","rightAnswer","toLowerCase","trim","score","errorGenerator","pleaseAnswer","setProgressFieldValue","open","send","updateProgressCounter","scoreMessage","final","Number","returnToMain","location","reload","message","newDiv","createElement","add","appendChild","setTimeout","removeChild","actionOne","actionTwo","divClass","topicDataRandom","topicDataBackup","selectTopic","JSON","parse","doAjax","preventDefault","id","randomTopicHolder","sort","a","b","Math"],"mappings":"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","file":"scripts.min.js","sourcesContent":["'use strict'; // no sloppy JS habits allowed here.\n// wait till page is fully loaded\ndocument.addEventListener('DOMContentLoaded', function(){\n\tvar topicData; // empty var to hold question JSON\n\tvar topicDataRandom; // will hold the shuffled order\n\tvar topicDataBackup; // untampered copy of topicData order\n\tvar topicPosition; // track the selected topic\n\tvar progressCounter = 0; // track number of questions asked\n\tvar score = 0; // track user's score\n\tvar final = null; // end status\n\tvar random = null;\n\t// collection of text strings\n\tvar textStrings = {\n\t\t'selectTopic' : 'Please select a topic.',\n\t\t'pleaseAnswer' : 'At least try and answer the question, alright?',\n\t\t'endQuiz' : 'Are you sure you want to end your quiz?'\n\t}\n\n\t// load questions and topics as soon as the page is ready\n\tfunction doAjax() {\n\t\tvar xmlhttp = new XMLHttpRequest(); // new request\n\t\tvar url = 'assets/data/topics.json'; // data source\n\n\t\txmlhttp.onreadystatechange = function() {\n\t\t\tif (this.readyState == 4 && this.status == 200) {\n\t    \t\ttopicData = JSON.parse(this.responseText); // holds entire JSON\n\t    \t\ttopicDataBackup = topicData; // create backup\n\t    \t\ttopicDataRandom = topicData; // set random order to normal values... for now\n\t    \t\t// console.log(topicData, 'untouched topicData');\n\t    \t\tpopulateTopic(); // fill Topic dropdown menu for user to choose\n\t    \t}\n    \t}\n\t    xmlhttp.open('GET', url, true); // connect\n\t    xmlhttp.send(); // Engage!\n\t}\n\tdoAjax(); // You know, run function.\n\n\t// built my own select menu\n\tfunction watchSelectMenu(){\n\t\t// open select menu when clicked\n\t\tdocument.querySelector(\"#topicMenu\").addEventListener(\"click\", function(event){\n\t\t\tevent.preventDefault(); // stop button standard action\n\t\t\t//console.log(\"You clicked\",this.id);\n\t\t\texpandMenu(this.id); //pass id to menu function\n\t\t});\n\n\t}\n\twatchSelectMenu();\n\n\t// when button is clicked, toggle visibility of menu items\n\tfunction expandMenu(target) {\n\n\t\t// change CSS visibility for specified menu ID\n\t\tdocument.querySelector(\"#\"+target+\"+.dropdownList\").classList.toggle(\"show\");\n\n\t\t// hide menu if anything other than button is clicked\n\t\tdocument.querySelector('body').addEventListener('click', function(event){\n\t\t\t// if topic menu exists on page...\n\t\t\tif (document.querySelector(\"#topicMenu + .dropdownList\")) {\n\t\t\t\t// if target isn't a button turn off show CSS class\n\t\t\t\tif (!event.target.matches('button')) {\n\t\t\t\t\tdocument.querySelector(\"#topicMenu + .dropdownList\").classList.remove(\"show\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} // end expandMenu\n\n\t// set homepage topic menu header from JSON when menu item is selected\n\tfunction setTopic(selection, count) {\n\t\tdocument.querySelector(\"#topicMenu\").innerText = selection;\n\t\tdocument.querySelector(\"#topicMenu + .dropdownList\").classList.toggle(\"show\");\n\t\t//console.log(\"you clicked \"+selection.innerHTML);\n\t\tdocument.querySelector('.questionCount').innerHTML = count + ' Questions'; // total number of questions\n\t\tdocument.querySelector('.randomStatus').innerText = 'Random Off'; // start with random off\n\t\tdocument.querySelector('.randomHolder').classList.remove('hide'); // make visible\n\t}\n\n\t// set topic name on active quiz page\n\tfunction setTopicHeader() {\n\t\tdocument.querySelector('.topic').innerText = topicData[topicPosition]['name'];\n\t}\n\n\t// set description contents from JSON when menu item is selected\n\tfunction setDescription(spot) {\n\t\tdocument.querySelector(\"#topicRow .lowerBox\").innerHTML = topicData[spot]['description'];\n\t}\n\n\t// load topic items from JSON file\n\tfunction populateTopic() {\n\t\tvar topicList = ''; // hold HTML tag elements\n\t\tvar linkOpen = '<a>'; // opening tag to be appended below\n\t\tvar linkClose = '</a>' // closing tag to be appended below\n\t\t// attach opening and closing tag to each topic captured from JSON\n\t\tfor (var i = 0; i < topicData.length; i++) {\n\t\t\ttopicList += linkOpen + topicData[i][\"name\"] + linkClose; // grab name field\n\t\t}\n\t\tdocument.querySelector(\"#topicList\").innerHTML = topicList; // set div content\n\t\tvar menuItems = document.querySelectorAll(\".dropdownList a\"); // selector for all list link elements\n\n\t\t// set click event listener for each element. I think this was clever\n\t\tfor (var i = 0; i < menuItems.length; i++) {\n\t\t\t// Creates an attribute to track order. Sets it to current loop iteration value\n\t\t\tmenuItems[i].setAttribute('order', i);\n\t\t\t// onclick function for every menuItem link\n\t\t\tmenuItems[i].onclick = function(){\n\t\t\t\t// sends order position to description function. Function pulls the corresponding description from the JSON\n\t\t\t\ttopicPosition = this.getAttribute('order');\n\t\t\t\tsetDescription(topicPosition); // set description to selected topic\n\t\t\t\tvar questionTotal = topicData[topicPosition]['questions'].length; // count questions\n\t\t\t\tsetTopic(this.innerHTML,questionTotal); // sends topic name to the button value. questionTotal to description\n\t\t\t}\n\t\t}\n\t}\n\n\t// event listener for start button. I can move this somewhere else...\n\tfunction watchQuiz(){\n\t\t// start quiz when button is pressed\n\t\tdocument.querySelector('.start').addEventListener('click', function() {\n\t\t\t// console.log(document.querySelector('#topicMenu').innerText);\n\t\t\tvar topicVar = document.querySelector('#topicMenu').innerText; // DOM selection for chosen topic\n\t\t\t// Input validation for topic\n\t\t\tif (topicVar == 'Choose One') {\n\t\t\t\terrorGenerator(textStrings.selectTopic); // modal with nagging text\n\t\t\t} else {\n\t\t\t\tstartQuiz(); // Engage!\n\t\t\t}\n\t\t});\n\t}\n\twatchQuiz(); // start event listener. Called via function later when container content is replaced.\n\t// I know there's probably a smarter way to do this...\n\n\n// ...\n\t// function randomize(a, b) {\n\t// \tconsole.log('i\\'m inside the randomize');\n\t//     return Math.random();\n\t// }\n\n\t//\n\tdocument.querySelector('.randomHolder').addEventListener('click', function(){\n\t\tif (random) {\n\t\t\trandom = false;\n\t\t\tdocument.querySelector('.randomStatus').innerText = 'Random off';\n\t\t\tdocument.querySelector('.randomHolder').classList.remove('active');\n\t\t\ttopicData = topicDataBackup; // reset topicData to the backup copy.\n\t\t\tconsole.log(topicData[topicPosition]['questions']);\n\t\t} else {\n\t\t\tconsole.log(topicData[topicPosition]['questions'], 'untouched topicData');\n\t\t\trandom = true;\n\t\t\tdocument.querySelector('.randomStatus').innerText = 'Random on';\n\t\t\tdocument.querySelector('.randomHolder').classList.add('active');\n\t\t\tvar randomTopicHolder = topicDataRandom[topicPosition]['questions'];\n\t\t\tconsole.log(randomTopicHolder,'normal order');\n\t\t\trandomTopicHolder.sort(function (a, b) {return Math.random() - 0.5;})\n    \t\tconsole.log(randomTopicHolder,'random order');\n\t\t\ttopicData = topicDataRandom;\n\t\t\tconsole.log(topicData[topicPosition]['questions'],'topicData now random');\n\t\t}\n\t});\n\n\t// grab quiz page body and fire off question and score system. This is the big one.\n\tfunction startQuiz(){\n\t\t// load quiz screen via AJAX\n\t\tvar xmlhttp = new XMLHttpRequest(); // new request\n\t\tvar url = 'assets/data/questionScreen.html'; // data source. It's just an HTML page\n\n\t\txmlhttp.onreadystatechange = function() {\n\t\t\tif (this.readyState == 4 && this.status == 200) {\n\t    \t\tvar quizBody = this.responseText; // holds entire JSON\n\t    \t\t// render HTML into container. A poor man's single page application.\n\t    \t\tdocument.querySelector('.container').innerHTML = quizBody;\n\t    \t\t// How do I do this more intelligently?\n\n\t    \t\tsetTopicHeader(); // set topic name\n\t\t\t\t// prefill question one from current topic data\n\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicData[topicPosition]['questions'][0]['question'];\n\n\t\t\t\t// close button event listener\n\t\t\t\tdocument.querySelector('.close').addEventListener('click', function(){\n\t\t\t\t\tmodalGenerator(textStrings.endQuiz, 'yes', 'no'); // pass text to modal method\n\t\t\t\t});\n\n\t\t\t\t// event listener for hint button\n\t\t\t\tdocument.querySelector('.hint').addEventListener('click', function(){\n\t\t\t\t\tconsole.log('progress counter inside hint is', progressCounter);\n\t\t\t\t\tmodalGenerator(topicData[topicPosition]['questions'][progressCounter]['hint'], 'yes');\n\t\t\t\t});\n\n\t\t\t\t// event listener for skip button\n\t\t\t\tdocument.querySelector('.skip').addEventListener('click', function(){\n\t\t\t\t\tnextQuestion(); // load next question without changing score\n\t\t\t\t});\n\n\t\t\t\t// turn on random order\n\n\t\t\t\t/*document.querySelector('.random').addEventListener('click', function(){\n\t\t\t\t\tvar randomDiv = document.querySelector('.random');\n\t\t\t\t\trandomDiv.classList.toggle('active');\n\t\t\t\t\tif (random) {\n\t\t\t\t\t\trandom = false;\n\t\t\t\t\t\tconsole.log('Random is off!');\n\t\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random Off';\n\t\t\t\t\t} else {\n\t\t\t\t\t\trandom = true;\n\t\t\t\t\t\tconsole.log('Random is on!');\n\t\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random On';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t*/\n\t\t\t\tif (random) {\n\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random On';\n\t\t\t\t} else {\n\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random Off';\n\t\t\t\t}\n\n\t\t\t\t// event listener for validating answer\n\t\t\t\tdocument.querySelector('.answer').addEventListener('click', function(){\n\n\t\t\t\t\tvar userAnswer = document.querySelector('#answerRow textarea').value;\n\t\t\t\t\tvar rightAnswer = topicData[topicPosition]['questions'][(progressCounter)]['answer'];\n\t\t\t\t\t// console.log('user answer: ' + userAnswer);\n\t\t\t\t\t// basic validation. Show modal if there's a value in textarea\n\t\t\t\t\tif (userAnswer != '') {\n\t\t\t\t\t\t// see if user input matches real answer\n\t\t\t\t\t\tfunction checkAnswer(){\n\t\t\t\t\t\t\t// converts to lowercase and removes whitespace to be mobile friendly\n\t\t\t\t\t\t\tif (userAnswer.toLowerCase().trim() == rightAnswer.toLowerCase()) {\n\t\t\t\t\t\t\t\t// display right answer in modal\n\t\t\t\t\t\t\t\tmodalGenerator('Correct, the answer is <span class=\\'correct\\'>' + rightAnswer + '</span>', 'Continue');\n\t\t\t\t\t\t\t\tscore++; // increase score if correct\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tmodalGenerator('Sorry, the answer is <span class=\\'wrong\\'>' + rightAnswer + '</span>', 'Continue');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcheckAnswer(); // call above function. Useful if I move the code block somewhere else\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrorGenerator(textStrings.pleaseAnswer); // if field is blank yell at the user\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetProgressFieldValue(); // update progress value at top of screen\n\t    }\n\t    xmlhttp.open('GET', url, true); // connect\n\t    xmlhttp.send(); // Engage!\n\n\t} // end quiz. That was a big AJAX request...\n\n\t// load new question from topicData JSON dump\n\tfunction nextQuestion() {\n\n\t\t// update counter if there are questions left in the topic\n\t\tif(progressCounter < topicData[topicPosition]['questions'].length) {\n\t\t\tupdateProgressCounter();\n\t\t} else if (progressCounter == topicData[topicPosition]['questions'].length) {\n\t\t\t// Placeholder for now. In the future I may want to take additional actions here if the game is over.\n\t\t\tupdateProgressCounter(); // This currently handles the end game scenario. Action here is kinda redundant (for now).\n\t\t}\n\t}\n\n\t// update progress and score\n\tfunction updateProgressCounter() {\n\t\t// console.log('number of questions ' + topicData[topicPosition]['questions'].length);\n\t\t// increase score if there are questions to ask\n\t\tif(progressCounter < topicData[topicPosition]['questions'].length) {\n\t\t\tprogressCounter++; // +1\n\t\t\t// if we're not on the last question\n\t\t\tif (progressCounter <= topicData[topicPosition]['questions'].length - 1){\n\t\t\t\t// console.log('new value for progressCounter: ' + progressCounter);\n\t\t\t\t// set HTML content to new question value\n\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicData[topicPosition]['questions'][progressCounter]['question'];\n\t\t\t\t//console.log('this should be a new question',topicData[topicPosition]['questions'][progressCounter]['question']);\n\t\t\t\tsetProgressFieldValue(); // update progress display at top of page\n\t\t\t}\n\t\t}\n\t\t// if final question has already been asked\n\t\tif (progressCounter == topicData[topicPosition]['questions'].length) {\n\t\t\tconsole.log('Progress report: game over');\n\t\t\t// content of score page\n\t\t\tvar scoreMessage = '<h2>Game Over</h2>' + 'Topic: ' + topicData[topicPosition]['name']\n\t\t\t\t+ '<br>Category: ... Coming Soon <br>'\n\t\t\t\t+ '<strong>Score</strong>: ' + score + ' out of ' + topicData[topicPosition]['questions'].length;\n\t\t\t// lets other loops know the end game sequence is active.\n\t\t\t// Note: If I do a smarter content div replacement I'll need to clear this var when user presses Okay\n\t\t\tfinal = true;\n\t\t\tmodalGenerator(scoreMessage, 'Continue'); // should I make a 3rd var for desitnation?\n\t\t}\n\n\t}\n\n\t// update progress field contents\n\tfunction setProgressFieldValue() {\n\t\t// update counter at top of page\n\t\tif (document.querySelector('.progress')) {\n\t\t\tdocument.querySelector('.progress').innerHTML = 'Progress: '\n\t\t\t\t+ (Number(progressCounter) + 1) + ' / ' + topicData[topicPosition]['questions'].length;\n\t\t}\n\t\t// clear the answer textarea if it exists on the page\n\t\tif(document.querySelector('#answerRow textarea')){\n\t\t\tdocument.querySelector('#answerRow textarea').value = '';\n\t\t}\n\t}\n\n\t// clear quiz content from container div and load start screen\n\tfunction returnToMain() {\n\t\tlocation.reload();\n\t\t// I need to do this properly or not at all...\n\t\t//progressCounter = 0;\n\t\t//doAjax();\n\t}\n\n\t// nifty function to deliver standardized error messages\n\tfunction errorGenerator(message) {\n\t\tvar divClass = 'errorBox'; // matches CSS properties\n\t\tvar newDiv = document.createElement('div'); // create div element\n\t\tnewDiv.classList.add(divClass); // apply class for manipulation & styling\n\t\tnewDiv.innerText = message; // apply message var as content of new div\n\t\t//console.log(newDiv);\n\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t// delete error after 5 seconds\n\t\tsetTimeout(function() {\n\t    \tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t    }, 5000);\n\t}\n\n\tfunction modalGenerator(message, actionOne, actionTwo) {\n\t\tvar divClass = 'messageBox'; // hold CSS class name\n\t\tvar newDiv = document.createElement('div'); // create div element\n\t\tnewDiv.classList.add(divClass); // apply class for manipulation & styling\n\t\t//newDiv.innerText = message; // apply message var as content of new div. Ha, simpler times.\n\t\t// Assume two buttons means one will end game\n\t\tif (actionTwo) {\n\t\t\t// apply HTML for two button row. Use passed value for caption. Actions are predetermined.\n\t\t\tnewDiv.innerHTML = '<div class=\\'inner\\'><div class=\\'row pad\\'>'\n\t\t\t\t+ message + '</div> <div class=\\'row full multi\\'><button class=\\'yes\\'>' + actionOne\n\t\t\t\t+ '</button><button class=\\'no\\'>' + actionTwo +'</button></div></div>';\n\t\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t\t// If user clicks yes, return to main\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('click', function(){\n\t\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t\t\t\treturnToMain(); // O'Brian, one to beam up.\n\t\t\t});\n\t\t\t// If user presses no, just cancel\n\t\t\tdocument.querySelector('.' + divClass + ' .no').addEventListener('click', function(){\n\t\t\t\t// self destruct the modal if no\n\t\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t\t\t});\n\t\t}\n\t\t// If only one button option is passed\n\t\telse {\n\t\t\t// apply HTML for single button row. Use passed value for caption. Actions are still predetermined.\n\t\t\tnewDiv.innerHTML = '<div class=\\'inner\\'><div class=\\'row pad\\'>'\n\t\t\t\t+ message + '</div> <div class=\\'row full\\'><button class=\\'yes\\'>'\n\t\t\t\t+ actionOne + '</button></div></div>';\n\t\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t\t// if user clicks the button, delete the modal\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('click', function(){\n\t\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass)); // self destruct\n\t\t\t\t// If caption matches answer box button. There are smarter ways to do this...\n\t\t\t\tif (actionOne == 'Continue') {\n\t\t\t\t\t// if final var has value, do endgame scenario\n\t\t\t\t\tif (final) {\n\t\t\t\t\t\treturnToMain();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnextQuestion();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t}\n// end fake document ready\n}, false);\n"]}