{"version":3,"sources":["scripts.js"],"names":["document","addEventListener","expandMenu","target","querySelector","classList","toggle","event","matches","remove","setTopic","selection","count","innerText","innerHTML","setTopicHeader","topicData","topicPosition","setCategoryHeader","chosenCategory","setDescription","spot","populateTopic","topicList","i","length","menuItems","querySelectorAll","setAttribute","onclick","this","getAttribute","questionTotal","populateCategory","categoryList","counter","u","location","indexOf","push","console","log","categoryPosition","setCategory","categoryCounter","startQuiz","timeStart","Date","getTime","xmlhttp","XMLHttpRequest","onreadystatechange","readyState","status","quizBody","responseText","topicDataFilteredCategory","modalGenerator","textStrings","endQuiz","progressCounter","nextQuestion","random","userAnswer","value","rightAnswer","checkAnswer","toLowerCase","trim","score","errorGenerator","pleaseAnswer","setProgressFieldValue","open","send","updateProgressCounter","scoreMessage","final","timeEnd","gatherStats","Number","numberOfQuestions","returnToMain","reload","message","newDiv","createElement","add","appendChild","setTimeout","removeChild","actionOne","actionTwo","divClass","saveLocalStorage","itemName","window","localStorage","setItem","JSON","stringify","readLocalStorage","parse","getItem","gameSession","date","formatDate","outOf","duration","millisToMinutesAndSeconds","Math","abs","topic","category","months","d","dateNow","getDate","monthNow","getMonth","yearNow","getFullYear","getHours","getMinutes","getSeconds","millis","minutes","floor","seconds","toFixed","calculateScore","scoreHolder","calculateDuration","topicDataRandom","topicDataBackup","selectTopic","doAjax","preventDefault","id","contains","randomTopicHolder","sort","a","b"],"mappings":"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","file":"scripts.min.js","sourcesContent":["'use strict'; // no sloppy JS habits allowed here.\n// wait till page is fully loaded\ndocument.addEventListener('DOMContentLoaded', function(){\n\tvar topicData; // empty var to hold question JSON\n\tvar topicDataRandom; // will hold the shuffled order\n\tvar topicDataBackup; // untampered copy of topicData order\n\tvar topicDataFilteredCategory = []; // holds questions from current category\n\tvar topicPosition; // track the selected topic\n\tvar categoryPosition; // track current category position... I might need this to be an object later.\n\tvar chosenCategory = 'All'; // hold user's selected category\n\tvar progressCounter = 0; // track number of questions asked\n\tvar score = 0; // track user's score\n\tvar final = null; // end status\n\tvar random = null;\n\t// collection of text strings\n\tvar textStrings = {\n\t\t'selectTopic' : 'Please select a topic.',\n\t\t'pleaseAnswer' : 'At least try and answer the question, alright?',\n\t\t'endQuiz' : 'Are you sure you want to end your quiz?'\n\t}\n\tvar gameSession; // initialize local array for holding goals\n\t// if localStorage is found, load it into the variable\n\tif (readLocalStorage('gameSession')) {\n\t    console.log('Found existing localstorage values.',readLocalStorage('gameSession'));\n\t    gameSession = readLocalStorage('gameSession');\n\t  }\n\t// otherwise make a blank array\n\telse {\n\t    console.log('No local storage, starting fresh.');\n\t    gameSession = [];\n\t}\n\tvar timeStart;\n\tvar timeEnd;\n\tvar numberOfQuestions;\n\tfillStats();\n\n\t// load questions and topics as soon as the page is ready\n\tfunction doAjax() {\n\t\tvar xmlhttp = new XMLHttpRequest(); // new request\n\t\tvar url = 'assets/data/topics.json'; // data source\n\n\t\txmlhttp.onreadystatechange = function() {\n\t\t\tif (this.readyState == 4 && this.status == 200) {\n\t    \t\ttopicData = JSON.parse(this.responseText); // holds entire JSON\n\t    \t\ttopicDataBackup = topicData; // create backup\n\t    \t\ttopicDataRandom = topicData; // set random order to normal values... for now\n\t    \t\t// console.log(topicData, 'untouched topicData');\n\t    \t\tpopulateTopic(); // fill Topic dropdown menu for user to choose\n\t    \t}\n    \t}\n\t    xmlhttp.open('GET', url, true); // connect\n\t    xmlhttp.send(); // Engage!\n\t}\n\tdoAjax(); // You know, run function.\n\n\t// built my own select menu\n\tfunction watchSelectMenu(){\n\t\t// open select menu when clicked\n\t\tdocument.querySelector(\".dropdownMenu\").addEventListener(\"click\", function(event){\n\t\t\tevent.preventDefault(); // stop button standard action\n\t\t\tconsole.log(\"You clicked topic menu\",this.id);\n\t\t\texpandMenu(this.id); //pass id to menu function\n\t\t});\n\t\t// open category menu when clicked\n\t\tdocument.querySelector(\".secondMenu\").addEventListener(\"click\", function(event){\n\t\t\t\tif (!document.querySelector(\"#categoryMenu\").classList.contains('disabled')) {\n\t\t\t\t\tevent.preventDefault(); // stop button standard action\n\t\t\t\t\tconsole.log(\"You clicked categoryMenu\",this.id);\n\t\t\t\t\texpandMenu(this.id); //pass id to menu function\n\t\t\t\t}\n\t\t\t});\n\t}\n\twatchSelectMenu();\n\n\t// when button is clicked, toggle visibility of menu items. It's not fully reusable (yet)\n\tfunction expandMenu(target) {\n\n\t\t// change CSS visibility for specified menu ID\n\t\tdocument.querySelector(\"#\"+target+\"+.dropdownList\").classList.toggle(\"show\");\n\n\t\t// hide menu if anything other than button is clicked\n\t\tdocument.querySelector('body').addEventListener('click', function(event){\n\t\t\t// if topic menu exists on page...\n\t\t\tif (document.querySelector(\"#\"+target+\"+ .dropdownList\")) {\n\t\t\t\t// if target isn't a button turn off show CSS class\n\t\t\t\tif (!event.target.matches('button')) {\n\t\t\t\t\tdocument.querySelector(\"#\"+target+\"+ .dropdownList\").classList.remove(\"show\");\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t} // end expandMenu\n\n\t// set homepage topic menu header from JSON when menu item is selected\n\tfunction setTopic(selection, count) {\n\t\tdocument.querySelector(\"#topicMenu\").innerText = selection;\n\t\tdocument.querySelector(\"#topicMenu + .dropdownList\").classList.toggle(\"show\");\n\t\t//console.log(\"you clicked \"+selection.innerHTML);\n\t\tdocument.querySelector('.questionCount').innerHTML = count + ' Questions'; // total number of questions\n\t\tdocument.querySelector('.randomStatus').innerText = 'Random Off'; // start with random off\n\t\tdocument.querySelector('.randomHolder').classList.remove('hide'); // make visible\n\t}\n\n\t// set topic name on active quiz page\n\tfunction setTopicHeader() {\n\t\tdocument.querySelector('.topic').innerText = topicData[topicPosition]['name'];\n\t}\n\n\t// set topic name on active quiz page\n\tfunction setCategoryHeader() {\n\t\tdocument.querySelector('.category').innerText = 'Category: ' + chosenCategory;\n\t}\n\n\t// set description contents from JSON when menu item is selected\n\tfunction setDescription(spot) {\n\t\tdocument.querySelector(\"#topicRow .lowerBox\").innerHTML = topicData[spot]['description'];\n\t}\n\n\t// load topic items from JSON file\n\tfunction populateTopic() {\n\t\tvar topicList = ''; // hold HTML tag elements\n\t\tvar linkOpen = '<a>'; // opening tag to be appended below\n\t\tvar linkClose = '</a>' // closing tag to be appended below\n\t\t// attach opening and closing tag to each topic captured from JSON\n\t\tfor (var i = 0; i < topicData.length; i++) {\n\t\t\ttopicList += linkOpen + topicData[i][\"name\"] + linkClose; // grab name field\n\t\t}\n\t\tdocument.querySelector(\"#topicList\").innerHTML = topicList; // set div content\n\t\tvar menuItems = document.querySelectorAll(\"#topicList.dropdownList a\"); // selector for all list link elements\n\n\t\t// set click event listener for each element. I think this was clever\n\t\tfor (var i = 0; i < menuItems.length; i++) {\n\t\t\t// Creates an attribute to track order. Sets it to current loop iteration value\n\t\t\tmenuItems[i].setAttribute('order', i);\n\t\t\t// onclick function for every menuItem link\n\t\t\tmenuItems[i].onclick = function(){\n\t\t\t\t// sends order position to description function. Function pulls the corresponding description from the JSON\n\t\t\t\ttopicPosition = this.getAttribute('order');\n\t\t\t\tsetDescription(topicPosition); // set description to selected topic\n\t\t\t\tvar questionTotal = topicData[topicPosition]['questions'].length; // count questions\n\t\t\t\tsetTopic(this.innerHTML,questionTotal); // sends topic name to the button value. questionTotal to description\n\t\t\t\tif (document.querySelector('.secondMenu.disabled')) {\n\t\t\t\t\tdocument.querySelector('.secondMenu.disabled').classList.remove('disabled'); // enable the category selection menu\n\t\t\t\t}\n\t\t\t\tpopulateCategory(); // when topic is chosen set the category\n\t\t\t}\n\t\t}\n\t}\n\n\t// load category items from JSON file\n\tfunction populateCategory() {\n\t\tvar categoryList = '<a order=\\'0\\'>All</a>'; // hold HTML tag elements\n\t\tvar linkOpen = '<a>'; // opening tag to be appended below\n\t\tvar linkClose = '</a>' // closing tag to be appended below\n\t\tvar counter = 1; // counts number of questions in each category (might need an array...)\n\n\t\t// attach opening and closing tag to each topic captured from JSON\n\t\tvar u = []; // will hold unique categories\n\t\tvar location = topicData[topicPosition]['questions'];\n\t\tfor(var i = 0; i < location.length; i++) {\n\t\t\t// fancy index searching to filter unique values. If unique then add to array\n\t\t\tif (u.indexOf(location[i]['category']) == -1 && location[i]['category'] !== '') {\n\t\t\t\tu.push(location[i]['category']);\n\t\t\t\tconsole.log(topicData[topicPosition]['questions'][i]['category']);\n\t\t\t\tcategoryList += linkOpen + topicData[topicPosition]['questions'][i]['category'] + linkClose; // grab name field\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\n\t\tdocument.querySelector(\"#categoryList\").innerHTML = categoryList; // set div content\n\t\tvar menuItems = document.querySelectorAll(\"#categoryList.dropdownList a\"); // selector for all list link elements\n\n\t\t// set click event listener for each element. I still think this is clever\n\t\tfor (var i = 0; i < menuItems.length; i++) {\n\t\t\t// Creates an attribute to track order. Sets it to current loop iteration value\n\t\t\tmenuItems[i].setAttribute('order', i);\n\t\t\t// onclick function for every menuItem link\n\t\t\tmenuItems[i].onclick = function(){\n\t\t\t\t// sends order position to description function. Function pulls the corresponding description from the JSON\n\t\t\t\tcategoryPosition = this.getAttribute('order');\n\t\t\t\t//setCatDescription(categoryPosition); // there is no category Position right now.\n\t\t\t\t// var questionTotal = topicData[topicPosition]['category'].length; // count questions\n\t\t\t\tvar questionTotal = counter; // count questions\n\t\t\t\tsetCategory(this.innerHTML,questionTotal); // sends category name to the button value. questionTotal to description\n\t\t\t}\n\t\t}\n\t}\n\n\t// set homepage Category menu header when item is selected\n\tfunction setCategory(selection, count) {\n\t\tchosenCategory = selection; // set global category to user's selection\n\t\tdocument.querySelector(\"#categoryMenu\").innerText = selection;\n\t\tdocument.querySelector(\"#categoryMenu + .dropdownList\").classList.toggle(\"show\");\n\t\tconsole.log(\"you clicked \" + selection);\n\t\t// document.querySelector('.questionCount').innerHTML = topicDataFilteredCategory[progressCounter].length + ' Questions'; // total number of questions\n\t\t// attach opening and closing tag to each topic captured from JSON\n\t\tvar u = []; // will hold unique categories\n\t\tvar location = topicData[topicPosition]['questions'];\n\t\tvar categoryCounter = 0;\n\t\tfor(var i = 0; i < location.length; i++) {\n\t\t\tif (location[i]['category'] == chosenCategory) {\n\t\t\t\tcategoryCounter++;\n\t\t\t}\n\t\t}\n\t\tif (chosenCategory == 'All') {\n\t\t\tdocument.querySelector('.questionCount').innerHTML = location.length + ' Questions';\n\t\t} else {\n\t\t\tdocument.querySelector('.questionCount').innerHTML = categoryCounter + ' Questions'; // total number of questions\n\t\t}\n\n\t}\n\n\n\t// event listener for start button. I can move this somewhere else...\n\tfunction watchQuiz(){\n\t\t// start quiz when button is pressed\n\t\tdocument.querySelector('.start').addEventListener('click', function() {\n\t\t\t// console.log(document.querySelector('#topicMenu').innerText);\n\t\t\tvar topicVar = document.querySelector('#topicMenu').innerText; // DOM selection for chosen topic\n\t\t\t// Input validation for topic\n\t\t\tif (topicVar == 'Choose One') {\n\t\t\t\terrorGenerator(textStrings.selectTopic); // modal with nagging text\n\t\t\t} else {\n\t\t\t\tstartQuiz(); // Engage!\n\t\t\t}\n\t\t});\n\t}\n\twatchQuiz(); // start event listener. Called via function later when container content is replaced.\n\t// I know there's probably a smarter way to do this...\n\n\n\t// reusabe random function\n\t/*function randomize(a, b) {\n\t\tconsole.log('i\\'m inside the randomize');\n\t    return Math.random();\n\t}*/\n\n\t//event listener to activate random order\n\tdocument.querySelector('.randomHolder').addEventListener('click', function(){\n\t\tif (random) {\n\t\t\trandom = false;\n\t\t\tdocument.querySelector('.randomStatus').innerText = 'Random off';\n\t\t\tdocument.querySelector('.randomHolder').classList.remove('active');\n\t\t\ttopicData = topicDataBackup; // reset topicData to the backup copy.\n\t\t\tconsole.log(topicData[topicPosition]['questions']);\n\t\t} else {\n\t\t\tconsole.log(topicData[topicPosition]['questions'], 'untouched topicData');\n\t\t\trandom = true;\n\t\t\tdocument.querySelector('.randomStatus').innerText = 'Random on';\n\t\t\tdocument.querySelector('.randomHolder').classList.add('active');\n\t\t\tvar randomTopicHolder = topicDataRandom[topicPosition]['questions'];\n\t\t\tconsole.log(randomTopicHolder,'normal order');\n\t\t\trandomTopicHolder.sort(function (a, b) {return Math.random() - 0.5;})\n    \t\tconsole.log(randomTopicHolder,'random order');\n\t\t\ttopicData = topicDataRandom;\n\t\t\tconsole.log(topicData[topicPosition]['questions'],'topicData now random');\n\t\t}\n\t});\n\n\t// grab quiz page body and fire off question and score system. This is the big one.\n\tfunction startQuiz(){\n\t\ttimeStart = new Date().getTime();\n\t\t// load quiz screen via AJAX\n\t\tvar xmlhttp = new XMLHttpRequest(); // new request\n\t\tvar url = 'assets/data/questionScreen.html'; // data source. It's just an HTML page\n\n\t\t// load quiz body and call even listeners\n\t\txmlhttp.onreadystatechange = function() {\n\t\t\tif (this.readyState == 4 && this.status == 200) {\n\t    \t\tvar quizBody = this.responseText; // holds entire JSON\n\t    \t\t// render HTML into container. A poor man's single page application.\n\t    \t\tdocument.querySelector('body').innerHTML = quizBody;\n\t    \t\t// How do I do this more intelligently?\n\n\t    \t\tsetTopicHeader(); // set topic name\n\t    \t\tsetCategoryHeader(); // set category name\n\n\t\t\t\t/* categoryconversion: filter topicData to contain only the selected category. Note, this means toggling random might\n\t\t\t\tneed to clear category menu also */\n\t\t\t\t/* somewhere...\n\t\t\t\t\ttopicData[topicPosition]['questions'][i]['category'];\n\t\t\t\t\tmake new array of questions that match chosen cateory. do live filter?\n\t\t\t\t\tadd u to global scope.\n\t\t\t\t\tadd onclick to set global currentCategory var from menu\n\t\t\t\t\tfor loop to determine if questions[i]['category'] = currentCategory\n\t\t\t\t\tchange it here and in nextQuestion()\n\t\t\t\t*/\n\t\t\t\t// if no category is chosen, proceed in with simple question asking\n\t\t\t\tif (chosenCategory == 'All') {\n\t\t\t\t\t// prefill question one from current topic data\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicData[topicPosition]['questions'][0]['question'];\n\t\t\t\t} else {\n\t\t\t\t\t// console.log(topicData[topicPosition]['questions'].length,'length of questions');\n\t\t\t\t\tconsole.log('chosenCategory',chosenCategory);\n\t\t\t\t\tconsole.log(topicData[topicPosition]['questions']);\n\t\t\t\t\t// find all questions that match chosen category\n\t\t\t\t\tfor (var i = 0; i < topicData[topicPosition]['questions'].length; i++) {\n\t\t\t\t\t\t// if question matches category, add to filtered array\n\t\t\t\t\t\tconsole.log(topicData[topicPosition]['questions'][i]['category']);\n\t\t\t\t\t\tif (topicData[topicPosition]['questions'][i]['category'] == chosenCategory){\n\t\t\t\t\t\t\ttopicDataFilteredCategory.push(topicData[topicPosition]['questions'][i]);\n\t\t\t\t\t\t\t// console.log('category match. i gonna push');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(topicDataFilteredCategory,'show me what you got, topicDataFilteredCategory.');\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicDataFilteredCategory[0]['question'];\n\t\t\t\t\t/* current issue. filteredcategory is a ghetto clone and only has question data, not hints, etc.\n\t\t\t\t\tI need to fill it with the same content and structure as the normal array for the rest of the all to function.\n\t\t\t\t\tBut I can still feel good because it's almost there. I've come a long way. */\n\t\t\t\t}\n\n\n\t\t\t\t// close button event listener\n\t\t\t\tdocument.querySelector('.close').addEventListener('click', function(){\n\t\t\t\t\tmodalGenerator(textStrings.endQuiz, 'yes', 'no'); // pass text to modal method\n\t\t\t\t});\n\n\t\t\t\t// event listener for hint button\n\t\t\t\tdocument.querySelector('.hint').addEventListener('click', function(){\n\t\t\t\t\tconsole.log('progress counter inside hint is', progressCounter);\n\t\t\t\t\tmodalGenerator(topicData[topicPosition]['questions'][progressCounter]['hint'], 'yes');\n\t\t\t\t});\n\n\t\t\t\t// event listener for skip button\n\t\t\t\tdocument.querySelector('.skip').addEventListener('click', function(){\n\t\t\t\t\tnextQuestion(); // load next question without changing score\n\t\t\t\t});\n\n\t\t\t\t// turn on random order\n\n\t\t\t\t/*document.querySelector('.random').addEventListener('click', function(){\n\t\t\t\t\tvar randomDiv = document.querySelector('.random');\n\t\t\t\t\trandomDiv.classList.toggle('active');\n\t\t\t\t\tif (random) {\n\t\t\t\t\t\trandom = false;\n\t\t\t\t\t\tconsole.log('Random is off!');\n\t\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random Off';\n\t\t\t\t\t} else {\n\t\t\t\t\t\trandom = true;\n\t\t\t\t\t\tconsole.log('Random is on!');\n\t\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random On';\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t*/\n\t\t\t\tif (random) {\n\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random On';\n\t\t\t\t} else {\n\t\t\t\t\tdocument.querySelector('.random span').innerHTML = 'Random Off';\n\t\t\t\t}\n\n\t\t\t\t// event listener for validating answer\n\t\t\t\tdocument.querySelector('.answer').addEventListener('click', function(){\n\t\t\t\t\tvar userAnswer = document.querySelector('#answerRow textarea').value;\n\t\t\t\t\tif (chosenCategory == 'All') {\n\t\t\t\t\t\tvar rightAnswer = topicData[topicPosition]['questions'][(progressCounter)]['answer'];\n\t\t\t\t\t\t// console.log('user answer: ' + userAnswer);\n\t\t\t\t\t\t// basic validation. Show modal if there's a value in textarea\n\t\t\t\t\t\tif (userAnswer != '') {\n\t\t\t\t\t\t\t// see if user input matches real answer\n\t\t\t\t\t\t\tfunction checkAnswer(){\n\t\t\t\t\t\t\t\t// converts to lowercase and removes whitespace to be mobile friendly\n\t\t\t\t\t\t\t\tif (userAnswer.toLowerCase().trim() == rightAnswer.toLowerCase()) {\n\t\t\t\t\t\t\t\t\t// display right answer in modal\n\t\t\t\t\t\t\t\t\tmodalGenerator('Correct, the answer is <span class=\\'correct\\'>' + rightAnswer + '</span>', 'Continue');\n\t\t\t\t\t\t\t\t\tscore++; // increase score if correct\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmodalGenerator('Sorry, the answer is <span class=\\'wrong\\'>' + rightAnswer + '</span>', 'Continue');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcheckAnswer(); // call above function. Useful if I move the code block somewhere else\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\terrorGenerator(textStrings.pleaseAnswer); // if field is blank yell at the user\n\t\t\t\t\t\t}\n\t\t\t\t\t} // end all category\n\n\t\t\t\t\t// if there is a specified category ggg\n\t\t\t\t\telse {\n\t\t\t\t\t\tvar rightAnswer = topicDataFilteredCategory[(progressCounter)]['answer'];\n\t\t\t\t\t\t// basic validation. Show modal if there's a value in textarea\n\t\t\t\t\t\tif (userAnswer != '') {\n\t\t\t\t\t\t\t// see if user input matches real answer\n\t\t\t\t\t\t\tfunction checkAnswer(){\n\t\t\t\t\t\t\t\t// converts to lowercase and removes whitespace to be mobile friendly\n\t\t\t\t\t\t\t\tif (userAnswer.toLowerCase().trim() == rightAnswer.toLowerCase()) {\n\t\t\t\t\t\t\t\t\t// display right answer in modal\n\t\t\t\t\t\t\t\t\tmodalGenerator('Correct, the answer is <span class=\\'correct\\'>' + rightAnswer + '</span>', 'Continue');\n\t\t\t\t\t\t\t\t\tscore++; // increase score if correct\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tmodalGenerator('Sorry, the answer is <span class=\\'wrong\\'>' + rightAnswer + '</span>', 'Continue');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcheckAnswer(); // call above function. Useful if I move the code block somewhere else\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\terrorGenerator(textStrings.pleaseAnswer); // if field is blank yell at the user\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // end\n\n\n\n\n\t\t\t\t});\n\t\t\t}\n\t\t\tsetProgressFieldValue(); // update progress value at top of screen\n\t    }\n\t    xmlhttp.open('GET', url, true); // connect\n\t    xmlhttp.send(); // Engage!\n\n\t} // end quiz. That was a big AJAX request...\n\n\t// load new question from topicData JSON dump\n\tfunction nextQuestion() {\n\n\t\t// update counter if there are questions left in the topic\n\t\tif(progressCounter < topicData[topicPosition]['questions'].length) {\n\t\t\tupdateProgressCounter();\n\t\t} else if (progressCounter == topicData[topicPosition]['questions'].length) {\n\t\t\t// Placeholder for now. In the future I may want to take additional actions here if the game is over.\n\t\t\tupdateProgressCounter(); // This currently handles the end game scenario. Action here is kinda redundant (for now).\n\t\t}\n\t}\n\n\t// update progress and score\n\tfunction updateProgressCounter() {\n\t\t// if no category is specified\n\t\tif (chosenCategory == 'All') {\n\t\t\t// increase score if there are questions to ask\n\t\t\tif(progressCounter < topicData[topicPosition]['questions'].length) {\n\t\t\t\tprogressCounter++; // +1\n\t\t\t\t// if we're not on the last question\n\t\t\t\tif (progressCounter <= topicData[topicPosition]['questions'].length - 1){\n\t\t\t\t\t// console.log('new value for progressCounter: ' + progressCounter);\n\t\t\t\t\t// set HTML content to new question value\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicData[topicPosition]['questions'][progressCounter]['question'];\n\t\t\t\t\t//console.log('this should be a new question',topicData[topicPosition]['questions'][progressCounter]['question']);\n\t\t\t\t\tsetProgressFieldValue(); // update progress display at top of page\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if final question has already been asked\n\t\t\tif (progressCounter == topicData[topicPosition]['questions'].length) {\n\t\t\t\tconsole.log('Progress report: game over');\n\t\t\t\t// content of score page\n\t\t\t\tvar scoreMessage = '<h2>Game Over</h2>' + 'Topic: ' + topicData[topicPosition]['name']\n\t\t\t\t\t+ '<br>Category: ' + chosenCategory\n\t\t\t\t\t+ '<br><strong>Score</strong>: ' + score + ' out of ' + topicData[topicPosition]['questions'].length;\n\t\t\t\t// lets other loops know the end game sequence is active.\n\t\t\t\t// Note: If I do a smarter content div replacement I'll need to clear this var when user presses Okay\n\t\t\t\tfinal = true;\n\t\t\t\ttimeEnd = new Date().getTime();\n\t\t\t\tgatherStats(); // send session stats to localStorage\n\t\t\t\tmodalGenerator(scoreMessage, 'Continue'); // should I make a 3rd var for desitnation?\n\t\t\t}\n\t\t} // end all category\n\t\t// if specific category is chosen\n\t\telse {\n\t\t\tif(progressCounter < topicDataFilteredCategory.length) {\n\t\t\t\tprogressCounter++; // +1\n\t\t\t\t// if we're not on the last question\n\t\t\t\tif (progressCounter <= topicDataFilteredCategory.length - 1){\n\t\t\t\t\t// console.log('new value for progressCounter: ' + progressCounter);\n\t\t\t\t\t// set HTML content to new question value\n\t\t\t\t\tdocument.querySelector('.questionHolder').innerHTML = topicDataFilteredCategory[progressCounter]['question'];\n\t\t\t\t\t//console.log('this should be a new question',topicData[topicPosition]['questions'][progressCounter]['question']);\n\t\t\t\t\tsetProgressFieldValue(); // update progress display at top of page\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if final question has already been asked\n\t\t\tif (progressCounter == topicDataFilteredCategory.length) {\n\t\t\t\tconsole.log('Progress report: game over');\n\t\t\t\t// content of score page\n\t\t\t\tvar scoreMessage = '<h2>Game Over</h2>' + 'Topic: ' + topicData[topicPosition]['name']\n\t\t\t\t\t+ '<br>Category: ' + chosenCategory\n\t\t\t\t\t+ '<br><strong>Score</strong>: ' + score + ' out of ' + topicDataFilteredCategory.length;\n\t\t\t\t// lets other loops know the end game sequence is active.\n\t\t\t\t// Note: If I do a smarter content div replacement I'll need to clear this var when user presses Okay\n\t\t\t\tfinal = true;\n\t\t\t\ttimeEnd = new Date().getTime();\n\t\t\t\tgatherStats(); // send session stats to localStorage\n\t\t\t\tmodalGenerator(scoreMessage, 'Continue'); // should I make a 3rd var for desitnation?\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// update progress field contents\n\tfunction setProgressFieldValue() {\n\t\tif (chosenCategory == 'All') {\n\t\t\t// update counter at top of page\n\t\t\tif (document.querySelector('.progress')) {\n\t\t\t\tdocument.querySelector('.progress').innerHTML = 'Progress: '\n\t\t\t\t\t+ (Number(progressCounter) + 1) + ' / ' + topicData[topicPosition]['questions'].length;\n\t\t\t\t\tnumberOfQuestions = topicData[topicPosition]['questions'].length;\n\t\t\t}\n\t\t\t// clear the answer textarea if it exists on the page\n\t\t\tif(document.querySelector('#answerRow textarea')){\n\t\t\t\tdocument.querySelector('#answerRow textarea').value = '';\n\t\t\t}\n\t\t}\n\t\t// if specific category is chosen\n\t\telse {\n\t\t\t// update counter at top of page\n\t\t\tif (document.querySelector('.progress')) {\n\t\t\t\tdocument.querySelector('.progress').innerHTML = 'Progress: '\n\t\t\t\t\t+ (Number(progressCounter) + 1) + ' / ' + topicDataFilteredCategory.length;\n\t\t\t\t\tnumberOfQuestions = topicDataFilteredCategory.length;\n\t\t\t}\n\t\t\t// clear the answer textarea if it exists on the page\n\t\t\tif(document.querySelector('#answerRow textarea')){\n\t\t\t\tdocument.querySelector('#answerRow textarea').value = '';\n\t\t\t}\n\t\t}\n\n\t}\n\n\t// clear quiz content from container div and load start screen\n\tfunction returnToMain() {\n\t\tlocation.reload();\n\t\t// I need to do this properly or not at all...\n\t\t//progressCounter = 0;\n\t\t//doAjax();\n\t}\n\n\t// nifty function to deliver standardized error messages\n\tfunction errorGenerator(message) {\n\t\tvar divClass = 'errorBox'; // matches CSS properties\n\t\tvar newDiv = document.createElement('div'); // create div element\n\t\tnewDiv.classList.add(divClass); // apply class for manipulation & styling\n\t\tnewDiv.innerText = message; // apply message var as content of new div\n\t\t//console.log(newDiv);\n\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t// delete error after 5 seconds\n\t\tsetTimeout(function() {\n\t    \tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t    }, 5000);\n\t}\n\n\tfunction modalGenerator(message, actionOne, actionTwo) {\n\t\tvar divClass = 'messageBox'; // hold CSS class name\n\t\tvar newDiv = document.createElement('div'); // create div element\n\t\tnewDiv.classList.add(divClass); // apply class for manipulation & styling\n\t\t//newDiv.innerText = message; // apply message var as content of new div. Ha, simpler times.\n\t\t// Assume two buttons means one will end game\n\t\tif (actionTwo) {\n\t\t\t// apply HTML for two button row. Use passed value for caption. Actions are predetermined.\n\t\t\tnewDiv.innerHTML = '<div class=\\'inner\\'><div class=\\'row pad\\'>'\n\t\t\t\t+ message + '</div> <div class=\\'row full multi\\'><button class=\\'yes\\'>' + actionOne\n\t\t\t\t+ '</button><button class=\\'no\\'>' + actionTwo +'</button></div></div>';\n\t\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t\t// If user clicks yes, return to main\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('click', function(){\n\t\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t\t\t\treturnToMain(); // O'Brian, one to beam up.\n\t\t\t});\n\t\t\t// If user presses no, just cancel\n\t\t\tdocument.querySelector('.' + divClass + ' .no').addEventListener('click', function(){\n\t\t\t\t// self destruct the modal if no\n\t\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass));\n\t\t\t});\n\t\t}\n\t\t// If only one button option is passed\n\t\telse {\n\t\t\t// apply HTML for single button row. Use passed value for caption. Actions are still predetermined.\n\t\t\tnewDiv.innerHTML = '<div class=\\'inner\\'><div class=\\'row pad\\'>'\n\t\t\t\t+ message + '</div> <div class=\\'row full\\'><button class=\\'yes\\'>'\n\t\t\t\t+ actionOne + '</button></div></div>';\n\t\t\tdocument.querySelector('.container').appendChild(newDiv); // render div at bottom of container\n\t\t\t// if user clicks the button, delete the modal\n\t\t\tdocument.querySelector('.' + divClass +' .yes').addEventListener('click', function(){\n\t\t\t\tdocument.querySelector('.container').removeChild(document.querySelector('.' + divClass)); // self destruct\n\t\t\t\t// If caption matches answer box button. There are smarter ways to do this...\n\t\t\t\tif (actionOne == 'Continue') {\n\t\t\t\t\t// if final var has value, do endgame scenario\n\t\t\t\t\tif (final) {\n\t\t\t\t\t\treturnToMain();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnextQuestion();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t} // end modal generator\n\n\n\t// save to localStorage\n\tfunction saveLocalStorage(itemName) {\n\t\twindow.localStorage.setItem('gameSession', JSON.stringify(itemName));\n\t\tconsole.log('prove it exists by typing:','JSON.parse(window.localStorage.getItem(\\'' + 'gameSession' + '\\'));');\n\t}\n\n\t  // read from localStorage\n\t  function readLocalStorage(itemName) {\n\t    return JSON.parse(window.localStorage.getItem(itemName));\n\t  }\n\n\t// collects data to send to localStorage\n\tfunction gatherStats(){\n\t\tconsole.log('Info sent to localStorage');\n\t  \t// When game is over, push stats to array\n\t\tgameSession.push({\n\t\t\t'date' : formatDate(),\n\t\t\t'score' : score,\n\t\t\t'outOf' : numberOfQuestions,\n\t\t\t'duration' : [timeStart, timeEnd, millisToMinutesAndSeconds(Math.abs(timeStart - timeEnd))],\n\t\t\t'topic' : topicData[topicPosition]['name'],\n\t\t\t'category' : chosenCategory\n\t\t});\n\t\t// send array to localStorage function\n\t\tsaveLocalStorage(gameSession);\n\t}\n\n\t// date and time\n\tfunction formatDate() {\n\t    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\n\t    var d = new Date();\n\t    var dateNow = d.getDate();\n\t    var monthNow = d.getMonth();\n\t    var yearNow = d.getFullYear();\n\t    var timeNow = d.getHours()+':'+d.getMinutes()+':'+d.getSeconds();\n\t    return months[monthNow] +' '+ dateNow + ', ' + yearNow;\n  \t}\n\n  \t// miliseconds to seconds\n  \tfunction millisToMinutesAndSeconds(millis) {\n\t  var minutes = Math.floor(millis / 60000);\n\t  var seconds = ((millis % 60000) / 1000).toFixed(0);\n\t  return minutes + \":\" + (seconds < 10 ? '0' : '') + seconds;\n\t}\n\n\t// fill out stats blocks\n\tfunction fillStats() {\n\t\tif (readLocalStorage('gameSession')) {\n\t\t\tconsole.log('gameSession', gameSession);\n\t\t\tdocument.querySelector('.stats .quizSessions span').innerHTML = gameSession.length;\n\t\t\tdocument.querySelector('.stats .avgScore span').innerHTML = calculateScore();\n\t\t\tdocument.querySelector('.stats .avgDuration span').innerHTML = calculateDuration();\n\t\t\t//document.querySelector('.stats .fastestRound span').innerHTML = calcualteFastest();\n\t\t\t//document.querySelector('.stats .slowestRound span').innerHTML = gameSession.length;\n\t\t} else {\n\t\t\tdocument.querySelector('.stats ul').innerHTML = '<span class=\\'dim\\'>No games played yet!</span>';\n\t\t}\n\t}\n\n\tfunction calculateScore() {\n\t\tvar scoreHolder = 0;\n\t\tfor(var i = 0;i<gameSession.length;i++){\n\t\t\tscoreHolder += gameSession[i]['score'] / gameSession[i]['outOf'];\n\t\t\tconsole.log(scoreHolder, \"scoreHolder current\");\n\t\t}\n\t\tconsole.log(scoreHolder / gameSession.length,'scoreholder / gamelesson length');\n\t\tscoreHolder = scoreHolder / gameSession.length * 100 + '%';\n\t\tconsole.log(scoreHolder);\n\t\treturn scoreHolder;\n\t}\n\n\tfunction calculateDuration() {\n\t\tvar scoreHolder = 0;\n\t\tfor(var i = 0;i<gameSession.length;i++){\n\t\t\tscoreHolder += gameSession[i]['duration'][1] - gameSession[i]['duration'][0];\n\t\t\tconsole.log(scoreHolder, \"scoreHolder current\");\n\t\t}\n\t\tscoreHolder = scoreHolder / gameSession.length;\n\t\tconsole.log(scoreHolder, 'avg duration here');\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\n\t}\n\n\tfunction calcualteFastest() {\n\t\tvar scoreHolder = 0;\n\t\tfor(var i = 0;i<gameSession.length;i++){\n\t\t\tscoreHolder += gameSession[i]['duration'][1] - gameSession[i]['duration'][0];\n\t\t\tconsole.log(scoreHolder, \"scoreHolder current\");\n\t\t}\n\t\tscoreHolder = scoreHolder / gameSession.length;\n\t\tconsole.log(scoreHolder, 'avg duration here');\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\n\t}\n\n\tfunction calcualteSlowest() {\n\t\tvar scoreHolder = 0;\n\n\t\treturn millisToMinutesAndSeconds(scoreHolder);\n\t}\n\n// end fake document ready\n}, false);"]}